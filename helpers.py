# helper functions for saving sample data and models

# import data loading libraries
import os
import pdb
import pickle
import argparse

import warnings
warnings.filterwarnings("ignore")

# import torch
import torch


# numpy & scipy imports
import numpy as np
import scipy

from torchvision.utils import save_image


def checkpoint(iteration, G_XtoY, G_YtoX, D_X, D_Y, checkpoint_dir='checkpoints_cyclegan'):
    """Saves the parameters of both generators G_YtoX, G_XtoY and discriminators D_X, D_Y.
        """
    G_XtoY_path = os.path.join(checkpoint_dir, 'G_XtoY.pkl')
    G_YtoX_path = os.path.join(checkpoint_dir, 'G_YtoX.pkl')
    D_X_path = os.path.join(checkpoint_dir, 'D_X.pkl')
    D_Y_path = os.path.join(checkpoint_dir, 'D_Y.pkl')
    torch.save(G_XtoY.state_dict(), G_XtoY_path)
    torch.save(G_YtoX.state_dict(), G_YtoX_path)
    torch.save(D_X.state_dict(), D_X_path)
    torch.save(D_Y.state_dict(), D_Y_path)


def merge_images(sources, targets, batch_size=16):
    """Creates a grid consisting of pairs of columns, where the first column in
        each pair contains images source images and the second column in each pair
        contains images generated by the CycleGAN from the corresponding images in
        the first column.
        """
    _, _, h, w = sources.shape
    row = int(np.sqrt(batch_size))
    merged = np.zeros([3, row*h, row*w*2])
    for idx, (s, t) in enumerate(zip(sources, targets)):
        i = idx // row
        j = idx % row
        merged[:, i*h:(i+1)*h, (j*2)*h:(j*2+1)*h] = s
        merged[:, i*h:(i+1)*h, (j*2+1)*h:(j*2+2)*h] = t
    merged = merged.transpose(1, 2, 0)
    return merged
    

def save_samples(iteration, fixed_Y, fixed_X, G_YtoX, G_XtoY, batch_size=16, sample_dir='samples_cyclegan'):
    """Saves samples from both generators X->Y and Y->X.
        """
    # move input data to correct device
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

    fake_X = G_YtoX(fixed_Y.to(device))
    fake_Y = G_XtoY(fixed_X.to(device))
    
    X = fixed_X.to(device)
    Y = fixed_Y.to(device)
    

    fake_X = (fake_X + 1) / 2
    fake_Y = (fake_Y + 1) / 2
    Y = (Y + 1) / 2
    X = (X + 1) / 2
    
    #merged = merge_images(X, fake_Y, batch_size)
    merged = []
    for x, y in zip(X, fake_Y):
        merged.append(x)
        merged.append(y)

    merged = torch.stack(merged)
    path = os.path.join(sample_dir, f'X-Y-sample-{iteration:06d}.png')
    #imageio.imwrite(path, merged)
    save_image(merged, path)
    print(f'Saved {path}')
    
    #merged = merge_images(Y, fake_X, batch_size)
    merged = []
    for x, y in zip(Y, fake_X):
        merged.append(x)
        merged.append(y)

    merged = torch.stack(merged)
    path = os.path.join(sample_dir, f'Y-X-sample-{iteration:06d}.png')
    #imageio.imwrite(path, merged)
    save_image(merged, path)
    print(f'Saved {path}')
